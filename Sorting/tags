!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
List	quicksort.c	/^}List;$/;"	t	typeref:struct:tagList	file:
Node	quicksort.c	/^}Node;$/;"	t	typeref:struct:tagNode	file:
accept_list	bubble_sort.c	/^struct node *accept_list(int n)$/;"	f
accept_list	quicksort.c	/^void accept_list(List *list, int n)$/;"	f
accept_list	selection_sort.c	/^struct node *accept_list(int n)$/;"	f
bubble_sort	bubble_sort.c	/^struct node *bubble_sort(struct node *head, int n)$/;"	f
data	bubble_sort.c	/^    int data;$/;"	m	struct:node	file:
data	quicksort.c	/^        int data;$/;"	m	struct:tagNode	file:
data	selection_sort.c	/^    int data;$/;"	m	struct:node	file:
delete_node	quicksort.c	/^void delete_node(Node *obj)$/;"	f
display_list	bubble_sort.c	/^void display_list(struct node *head)$/;"	f
display_list	quicksort.c	/^void display_list(List *list)$/;"	f
display_list	selection_sort.c	/^void display_list(struct node *head)$/;"	f
free_list	bubble_sort.c	/^void free_list(struct node *head)$/;"	f
free_list	quicksort.c	/^void free_list(List *list)$/;"	f
free_list	selection_sort.c	/^void free_list(struct node* head)$/;"	f
head	quicksort.c	/^        Node head;$/;"	m	struct:tagList	file:
insert_after	quicksort.c	/^void insert_after(Node *after_this_obj, Node *obj)$/;"	f
insert_before	quicksort.c	/^void insert_before(Node *before_this_obj, Node *obj)$/;"	f
insert_head	quicksort.c	/^void insert_head(List *list, Node *obj)$/;"	f
insert_last	quicksort.c	/^void insert_last(List *list, Node *obj)$/;"	f
list_empty	quicksort.c	/^int list_empty(List *list)$/;"	f
list_init	quicksort.c	/^void list_init(List *list)$/;"	f
main	bubble_sort.c	/^int main(void)$/;"	f
main	quicksort.c	/^int main(void)$/;"	f
main	selection_sort.c	/^int main(void)$/;"	f
main	temp.c	/^int main(void)$/;"	f
next	bubble_sort.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node	file:
next	quicksort.c	/^        struct tagNode *next;$/;"	m	struct:tagNode	typeref:struct:tagNode::tagNode	file:
next	selection_sort.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node	file:
node	bubble_sort.c	/^struct node$/;"	s	file:
node	selection_sort.c	/^struct node$/;"	s	file:
prev	quicksort.c	/^        struct tagNode *prev;$/;"	m	struct:tagNode	typeref:struct:tagNode::tagNode	file:
quick_sort_ascending	quicksort.c	/^void quick_sort_ascending(List *list, Node *pivot, Node *last_node)$/;"	f
remove_node	quicksort.c	/^void remove_node(Node *obj)$/;"	f
selection_sort	selection_sort.c	/^struct node *selection_sort(struct node* head, int n)$/;"	f
swap_node	quicksort.c	/^void swap_node(Node *obj1, Node *obj2)$/;"	f
tagList	quicksort.c	/^typedef struct tagList {$/;"	s	file:
tagNode	quicksort.c	/^typedef struct tagNode {$/;"	s	file:
